//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Input/PlayerInput.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInput : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInput()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInput"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""e72ef0a1-d39c-4fd4-a165-fdf2941027fc"",
            ""actions"": [
                {
                    ""name"": ""DevilPower"",
                    ""type"": ""Button"",
                    ""id"": ""ebc62d3f-9c2c-437c-84f3-94719b5d72fc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SignUp"",
                    ""type"": ""Button"",
                    ""id"": ""502f891d-597a-48e4-9f42-5dd3bc2b7469"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SignLeft"",
                    ""type"": ""Button"",
                    ""id"": ""6bca4f2f-6661-4456-83de-fcd074239380"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SignRight"",
                    ""type"": ""Button"",
                    ""id"": ""8c754846-5b9d-44e6-852f-5e44cdba9f40"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""75692bf0-5baf-4170-82e6-c0de710b9b91"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""e799b56d-b758-4e43-9a93-d1ed6edda17b"",
                    ""path"": ""<Keyboard>/e"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevilPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a21aab48-1f37-4154-b5a8-11678824e8a5"",
                    ""path"": ""<Gamepad>/rightShoulder"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DevilPower"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8d6b135-c09c-45ad-80e4-d6f849ab82cf"",
                    ""path"": ""<Keyboard>/1"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SignUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3091066d-fad7-420f-8752-03b2ef2563e2"",
                    ""path"": ""<Gamepad>/buttonNorth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SignUp"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8f403849-5aa6-4d39-b9a8-6f95c7c6f833"",
                    ""path"": ""<Keyboard>/2"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SignLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2878e3ff-5a21-4f2e-b61e-8ef0ba69da85"",
                    ""path"": ""<Gamepad>/buttonWest"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SignLeft"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""fa28862b-711b-47f8-8121-6ca5e9095f64"",
                    ""path"": ""<Keyboard>/3"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SignRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""f946005f-698b-4fa2-b6d5-95450bf0a87e"",
                    ""path"": ""<Gamepad>/buttonEast"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SignRight"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8b945be5-1f22-4561-8cb4-b0205f17bb9d"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""7a84ddb9-f591-448d-bfa9-6551150ab062"",
                    ""path"": ""<Gamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_DevilPower = m_Player.FindAction("DevilPower", throwIfNotFound: true);
        m_Player_SignUp = m_Player.FindAction("SignUp", throwIfNotFound: true);
        m_Player_SignLeft = m_Player.FindAction("SignLeft", throwIfNotFound: true);
        m_Player_SignRight = m_Player.FindAction("SignRight", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_DevilPower;
    private readonly InputAction m_Player_SignUp;
    private readonly InputAction m_Player_SignLeft;
    private readonly InputAction m_Player_SignRight;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @PlayerInput m_Wrapper;
        public PlayerActions(@PlayerInput wrapper) { m_Wrapper = wrapper; }
        public InputAction @DevilPower => m_Wrapper.m_Player_DevilPower;
        public InputAction @SignUp => m_Wrapper.m_Player_SignUp;
        public InputAction @SignLeft => m_Wrapper.m_Player_SignLeft;
        public InputAction @SignRight => m_Wrapper.m_Player_SignRight;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @DevilPower.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDevilPower;
                @DevilPower.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDevilPower;
                @DevilPower.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnDevilPower;
                @SignUp.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignUp;
                @SignUp.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignUp;
                @SignUp.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignUp;
                @SignLeft.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignLeft;
                @SignLeft.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignLeft;
                @SignLeft.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignLeft;
                @SignRight.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignRight;
                @SignRight.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignRight;
                @SignRight.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSignRight;
                @Pause.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
                @Pause.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnPause;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @DevilPower.started += instance.OnDevilPower;
                @DevilPower.performed += instance.OnDevilPower;
                @DevilPower.canceled += instance.OnDevilPower;
                @SignUp.started += instance.OnSignUp;
                @SignUp.performed += instance.OnSignUp;
                @SignUp.canceled += instance.OnSignUp;
                @SignLeft.started += instance.OnSignLeft;
                @SignLeft.performed += instance.OnSignLeft;
                @SignLeft.canceled += instance.OnSignLeft;
                @SignRight.started += instance.OnSignRight;
                @SignRight.performed += instance.OnSignRight;
                @SignRight.canceled += instance.OnSignRight;
                @Pause.started += instance.OnPause;
                @Pause.performed += instance.OnPause;
                @Pause.canceled += instance.OnPause;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPlayerActions
    {
        void OnDevilPower(InputAction.CallbackContext context);
        void OnSignUp(InputAction.CallbackContext context);
        void OnSignLeft(InputAction.CallbackContext context);
        void OnSignRight(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
}
